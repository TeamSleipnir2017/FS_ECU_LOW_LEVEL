
FS2017_ECU_LOW_LEVEL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ac8  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000558  20070000  00080ac8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000008c  20070558  00081020  00020558  2**2
                  ALLOC
  3 .stack        00002004  200705e4  000810ac  00020558  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00020558  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020581  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000723a  00000000  00000000  000205da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000141a  00000000  00000000  00027814  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000020db  00000000  00000000  00028c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000520  00000000  00000000  0002ad09  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000450  00000000  00000000  0002b229  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016d84  00000000  00000000  0002b679  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000aa48  00000000  00000000  000423fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00061d27  00000000  00000000  0004ce45  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000b0c  00000000  00000000  000aeb6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	200725e8 	.word	0x200725e8
   80004:	000806c1 	.word	0x000806c1
   80008:	000806bd 	.word	0x000806bd
   8000c:	000806bd 	.word	0x000806bd
   80010:	000806bd 	.word	0x000806bd
   80014:	000806bd 	.word	0x000806bd
   80018:	000806bd 	.word	0x000806bd
	...
   8002c:	000806bd 	.word	0x000806bd
   80030:	000806bd 	.word	0x000806bd
   80034:	00000000 	.word	0x00000000
   80038:	000806bd 	.word	0x000806bd
   8003c:	000806bd 	.word	0x000806bd
   80040:	000806bd 	.word	0x000806bd
   80044:	000806bd 	.word	0x000806bd
   80048:	000806bd 	.word	0x000806bd
   8004c:	000806bd 	.word	0x000806bd
   80050:	000806bd 	.word	0x000806bd
   80054:	000806bd 	.word	0x000806bd
   80058:	000806bd 	.word	0x000806bd
   8005c:	000806bd 	.word	0x000806bd
   80060:	000806bd 	.word	0x000806bd
   80064:	000806bd 	.word	0x000806bd
   80068:	00000000 	.word	0x00000000
   8006c:	000808e5 	.word	0x000808e5
   80070:	0008041d 	.word	0x0008041d
   80074:	00080431 	.word	0x00080431
   80078:	00080445 	.word	0x00080445
	...
   80084:	000806bd 	.word	0x000806bd
   80088:	000806bd 	.word	0x000806bd
   8008c:	000806bd 	.word	0x000806bd
   80090:	000806bd 	.word	0x000806bd
   80094:	000806bd 	.word	0x000806bd
   80098:	000806bd 	.word	0x000806bd
   8009c:	000806bd 	.word	0x000806bd
   800a0:	000806bd 	.word	0x000806bd
   800a4:	00000000 	.word	0x00000000
   800a8:	000806bd 	.word	0x000806bd
   800ac:	0008092d 	.word	0x0008092d
   800b0:	000806bd 	.word	0x000806bd
   800b4:	000806bd 	.word	0x000806bd
   800b8:	000806bd 	.word	0x000806bd
   800bc:	000806bd 	.word	0x000806bd
   800c0:	000806bd 	.word	0x000806bd
   800c4:	000806bd 	.word	0x000806bd
   800c8:	000806bd 	.word	0x000806bd
   800cc:	000806bd 	.word	0x000806bd
   800d0:	000806bd 	.word	0x000806bd
   800d4:	000806bd 	.word	0x000806bd
   800d8:	000806bd 	.word	0x000806bd
   800dc:	000806bd 	.word	0x000806bd
   800e0:	000806bd 	.word	0x000806bd
   800e4:	000806bd 	.word	0x000806bd
   800e8:	000806bd 	.word	0x000806bd
   800ec:	000806bd 	.word	0x000806bd
   800f0:	000806bd 	.word	0x000806bd

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070558 	.word	0x20070558
   80110:	00000000 	.word	0x00000000
   80114:	00080ac8 	.word	0x00080ac8

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4908      	ldr	r1, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4808      	ldr	r0, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	2007055c 	.word	0x2007055c
   80144:	00080ac8 	.word	0x00080ac8
   80148:	00080ac8 	.word	0x00080ac8
   8014c:	00000000 	.word	0x00000000

00080150 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80150:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80152:	480e      	ldr	r0, [pc, #56]	; (8018c <sysclk_init+0x3c>)
   80154:	4b0e      	ldr	r3, [pc, #56]	; (80190 <sysclk_init+0x40>)
   80156:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80158:	213e      	movs	r1, #62	; 0x3e
   8015a:	2000      	movs	r0, #0
   8015c:	4b0d      	ldr	r3, [pc, #52]	; (80194 <sysclk_init+0x44>)
   8015e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80160:	4c0d      	ldr	r4, [pc, #52]	; (80198 <sysclk_init+0x48>)
   80162:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80164:	2800      	cmp	r0, #0
   80166:	d0fc      	beq.n	80162 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80168:	4b0c      	ldr	r3, [pc, #48]	; (8019c <sysclk_init+0x4c>)
   8016a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8016c:	4a0c      	ldr	r2, [pc, #48]	; (801a0 <sysclk_init+0x50>)
   8016e:	4b0d      	ldr	r3, [pc, #52]	; (801a4 <sysclk_init+0x54>)
   80170:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80172:	4c0d      	ldr	r4, [pc, #52]	; (801a8 <sysclk_init+0x58>)
   80174:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80176:	2800      	cmp	r0, #0
   80178:	d0fc      	beq.n	80174 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8017a:	2010      	movs	r0, #16
   8017c:	4b0b      	ldr	r3, [pc, #44]	; (801ac <sysclk_init+0x5c>)
   8017e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80180:	4b0b      	ldr	r3, [pc, #44]	; (801b0 <sysclk_init+0x60>)
   80182:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80184:	4801      	ldr	r0, [pc, #4]	; (8018c <sysclk_init+0x3c>)
   80186:	4b02      	ldr	r3, [pc, #8]	; (80190 <sysclk_init+0x40>)
   80188:	4798      	blx	r3
   8018a:	bd10      	pop	{r4, pc}
   8018c:	0501bd00 	.word	0x0501bd00
   80190:	200700a5 	.word	0x200700a5
   80194:	000804c1 	.word	0x000804c1
   80198:	00080515 	.word	0x00080515
   8019c:	00080525 	.word	0x00080525
   801a0:	200d3f01 	.word	0x200d3f01
   801a4:	400e0600 	.word	0x400e0600
   801a8:	00080535 	.word	0x00080535
   801ac:	00080459 	.word	0x00080459
   801b0:	0008076d 	.word	0x0008076d

000801b4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   801b4:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   801b6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   801ba:	d016      	beq.n	801ea <pio_set_peripheral+0x36>
   801bc:	d804      	bhi.n	801c8 <pio_set_peripheral+0x14>
   801be:	b1c1      	cbz	r1, 801f2 <pio_set_peripheral+0x3e>
   801c0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   801c4:	d00a      	beq.n	801dc <pio_set_peripheral+0x28>
   801c6:	e013      	b.n	801f0 <pio_set_peripheral+0x3c>
   801c8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   801cc:	d011      	beq.n	801f2 <pio_set_peripheral+0x3e>
   801ce:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   801d2:	d00e      	beq.n	801f2 <pio_set_peripheral+0x3e>
   801d4:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   801d8:	d10a      	bne.n	801f0 <pio_set_peripheral+0x3c>
   801da:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   801dc:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   801de:	6f03      	ldr	r3, [r0, #112]	; 0x70
   801e0:	400b      	ands	r3, r1
   801e2:	ea23 0302 	bic.w	r3, r3, r2
   801e6:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   801e8:	e002      	b.n	801f0 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   801ea:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   801ec:	4313      	orrs	r3, r2
   801ee:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   801f0:	6042      	str	r2, [r0, #4]
   801f2:	4770      	bx	lr

000801f4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   801f4:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   801f6:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   801fa:	bf14      	ite	ne
   801fc:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   801fe:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80200:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80204:	bf14      	ite	ne
   80206:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80208:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8020a:	f012 0f02 	tst.w	r2, #2
   8020e:	d002      	beq.n	80216 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80210:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80214:	e004      	b.n	80220 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80216:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8021a:	bf18      	it	ne
   8021c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80220:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80222:	6001      	str	r1, [r0, #0]
   80224:	4770      	bx	lr
   80226:	bf00      	nop

00080228 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80228:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8022a:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8022c:	9c01      	ldr	r4, [sp, #4]
   8022e:	b10c      	cbz	r4, 80234 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80230:	6641      	str	r1, [r0, #100]	; 0x64
   80232:	e000      	b.n	80236 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80234:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80236:	b10b      	cbz	r3, 8023c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80238:	6501      	str	r1, [r0, #80]	; 0x50
   8023a:	e000      	b.n	8023e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   8023c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8023e:	b10a      	cbz	r2, 80244 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80240:	6301      	str	r1, [r0, #48]	; 0x30
   80242:	e000      	b.n	80246 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80244:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80246:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80248:	6001      	str	r1, [r0, #0]
}
   8024a:	bc10      	pop	{r4}
   8024c:	4770      	bx	lr
   8024e:	bf00      	nop

00080250 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80250:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80252:	4770      	bx	lr

00080254 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80254:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80256:	4770      	bx	lr

00080258 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80258:	b570      	push	{r4, r5, r6, lr}
   8025a:	b082      	sub	sp, #8
   8025c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8025e:	0943      	lsrs	r3, r0, #5
   80260:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80264:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80268:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8026a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   8026e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80272:	d030      	beq.n	802d6 <pio_configure_pin+0x7e>
   80274:	d806      	bhi.n	80284 <pio_configure_pin+0x2c>
   80276:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8027a:	d00a      	beq.n	80292 <pio_configure_pin+0x3a>
   8027c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80280:	d018      	beq.n	802b4 <pio_configure_pin+0x5c>
   80282:	e049      	b.n	80318 <pio_configure_pin+0xc0>
   80284:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80288:	d030      	beq.n	802ec <pio_configure_pin+0x94>
   8028a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8028e:	d02d      	beq.n	802ec <pio_configure_pin+0x94>
   80290:	e042      	b.n	80318 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80292:	f000 001f 	and.w	r0, r0, #31
   80296:	2601      	movs	r6, #1
   80298:	4086      	lsls	r6, r0
   8029a:	4632      	mov	r2, r6
   8029c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   802a0:	4620      	mov	r0, r4
   802a2:	4b1f      	ldr	r3, [pc, #124]	; (80320 <pio_configure_pin+0xc8>)
   802a4:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   802a6:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   802aa:	bf14      	ite	ne
   802ac:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   802ae:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   802b0:	2001      	movs	r0, #1
   802b2:	e032      	b.n	8031a <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   802b4:	f000 001f 	and.w	r0, r0, #31
   802b8:	2601      	movs	r6, #1
   802ba:	4086      	lsls	r6, r0
   802bc:	4632      	mov	r2, r6
   802be:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   802c2:	4620      	mov	r0, r4
   802c4:	4b16      	ldr	r3, [pc, #88]	; (80320 <pio_configure_pin+0xc8>)
   802c6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   802c8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   802cc:	bf14      	ite	ne
   802ce:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   802d0:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   802d2:	2001      	movs	r0, #1
   802d4:	e021      	b.n	8031a <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   802d6:	f000 011f 	and.w	r1, r0, #31
   802da:	2601      	movs	r6, #1
   802dc:	462a      	mov	r2, r5
   802de:	fa06 f101 	lsl.w	r1, r6, r1
   802e2:	4620      	mov	r0, r4
   802e4:	4b0f      	ldr	r3, [pc, #60]	; (80324 <pio_configure_pin+0xcc>)
   802e6:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   802e8:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   802ea:	e016      	b.n	8031a <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   802ec:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
   802f0:	f000 011f 	and.w	r1, r0, #31
   802f4:	2601      	movs	r6, #1
   802f6:	ea05 0306 	and.w	r3, r5, r6
   802fa:	9300      	str	r3, [sp, #0]
   802fc:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80300:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80304:	bf14      	ite	ne
   80306:	2200      	movne	r2, #0
   80308:	2201      	moveq	r2, #1
   8030a:	fa06 f101 	lsl.w	r1, r6, r1
   8030e:	4620      	mov	r0, r4
   80310:	4c05      	ldr	r4, [pc, #20]	; (80328 <pio_configure_pin+0xd0>)
   80312:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80314:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80316:	e000      	b.n	8031a <pio_configure_pin+0xc2>

	default:
		return 0;
   80318:	2000      	movs	r0, #0
	}

	return 1;
}
   8031a:	b002      	add	sp, #8
   8031c:	bd70      	pop	{r4, r5, r6, pc}
   8031e:	bf00      	nop
   80320:	000801b5 	.word	0x000801b5
   80324:	000801f5 	.word	0x000801f5
   80328:	00080229 	.word	0x00080229

0008032c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   8032c:	b570      	push	{r4, r5, r6, lr}
   8032e:	b082      	sub	sp, #8
   80330:	4605      	mov	r5, r0
   80332:	460e      	mov	r6, r1
   80334:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80336:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   8033a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8033e:	d026      	beq.n	8038e <pio_configure_pin_group+0x62>
   80340:	d806      	bhi.n	80350 <pio_configure_pin_group+0x24>
   80342:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80346:	d00a      	beq.n	8035e <pio_configure_pin_group+0x32>
   80348:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8034c:	d013      	beq.n	80376 <pio_configure_pin_group+0x4a>
   8034e:	e034      	b.n	803ba <pio_configure_pin_group+0x8e>
   80350:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80354:	d01f      	beq.n	80396 <pio_configure_pin_group+0x6a>
   80356:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8035a:	d01c      	beq.n	80396 <pio_configure_pin_group+0x6a>
   8035c:	e02d      	b.n	803ba <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8035e:	460a      	mov	r2, r1
   80360:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80364:	4b16      	ldr	r3, [pc, #88]	; (803c0 <pio_configure_pin_group+0x94>)
   80366:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80368:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   8036c:	bf14      	ite	ne
   8036e:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80370:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80372:	2001      	movs	r0, #1
   80374:	e022      	b.n	803bc <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80376:	460a      	mov	r2, r1
   80378:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8037c:	4b10      	ldr	r3, [pc, #64]	; (803c0 <pio_configure_pin_group+0x94>)
   8037e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80380:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80384:	bf14      	ite	ne
   80386:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80388:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8038a:	2001      	movs	r0, #1
   8038c:	e016      	b.n	803bc <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   8038e:	4b0d      	ldr	r3, [pc, #52]	; (803c4 <pio_configure_pin_group+0x98>)
   80390:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80392:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80394:	e012      	b.n	803bc <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80396:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
   8039a:	f004 0301 	and.w	r3, r4, #1
   8039e:	9300      	str	r3, [sp, #0]
   803a0:	f3c4 0380 	ubfx	r3, r4, #2, #1
   803a4:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   803a8:	bf14      	ite	ne
   803aa:	2200      	movne	r2, #0
   803ac:	2201      	moveq	r2, #1
   803ae:	4631      	mov	r1, r6
   803b0:	4628      	mov	r0, r5
   803b2:	4c05      	ldr	r4, [pc, #20]	; (803c8 <pio_configure_pin_group+0x9c>)
   803b4:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   803b6:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   803b8:	e000      	b.n	803bc <pio_configure_pin_group+0x90>

	default:
		return 0;
   803ba:	2000      	movs	r0, #0
	}

	return 1;
}
   803bc:	b002      	add	sp, #8
   803be:	bd70      	pop	{r4, r5, r6, pc}
   803c0:	000801b5 	.word	0x000801b5
   803c4:	000801f5 	.word	0x000801f5
   803c8:	00080229 	.word	0x00080229

000803cc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   803cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   803d0:	4604      	mov	r4, r0
   803d2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   803d4:	4b0e      	ldr	r3, [pc, #56]	; (80410 <pio_handler_process+0x44>)
   803d6:	4798      	blx	r3
   803d8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   803da:	4620      	mov	r0, r4
   803dc:	4b0d      	ldr	r3, [pc, #52]	; (80414 <pio_handler_process+0x48>)
   803de:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   803e0:	4005      	ands	r5, r0
   803e2:	d013      	beq.n	8040c <pio_handler_process+0x40>
   803e4:	4c0c      	ldr	r4, [pc, #48]	; (80418 <pio_handler_process+0x4c>)
   803e6:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   803ea:	6823      	ldr	r3, [r4, #0]
   803ec:	4543      	cmp	r3, r8
   803ee:	d108      	bne.n	80402 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   803f0:	6861      	ldr	r1, [r4, #4]
   803f2:	4229      	tst	r1, r5
   803f4:	d005      	beq.n	80402 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   803f6:	68e3      	ldr	r3, [r4, #12]
   803f8:	4640      	mov	r0, r8
   803fa:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   803fc:	6863      	ldr	r3, [r4, #4]
   803fe:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80402:	42b4      	cmp	r4, r6
   80404:	d002      	beq.n	8040c <pio_handler_process+0x40>
   80406:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80408:	2d00      	cmp	r5, #0
   8040a:	d1ee      	bne.n	803ea <pio_handler_process+0x1e>
   8040c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80410:	00080251 	.word	0x00080251
   80414:	00080255 	.word	0x00080255
   80418:	20070574 	.word	0x20070574

0008041c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8041c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8041e:	210c      	movs	r1, #12
   80420:	4801      	ldr	r0, [pc, #4]	; (80428 <PIOB_Handler+0xc>)
   80422:	4b02      	ldr	r3, [pc, #8]	; (8042c <PIOB_Handler+0x10>)
   80424:	4798      	blx	r3
   80426:	bd08      	pop	{r3, pc}
   80428:	400e1000 	.word	0x400e1000
   8042c:	000803cd 	.word	0x000803cd

00080430 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80430:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80432:	210d      	movs	r1, #13
   80434:	4801      	ldr	r0, [pc, #4]	; (8043c <PIOC_Handler+0xc>)
   80436:	4b02      	ldr	r3, [pc, #8]	; (80440 <PIOC_Handler+0x10>)
   80438:	4798      	blx	r3
   8043a:	bd08      	pop	{r3, pc}
   8043c:	400e1200 	.word	0x400e1200
   80440:	000803cd 	.word	0x000803cd

00080444 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80444:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80446:	210e      	movs	r1, #14
   80448:	4801      	ldr	r0, [pc, #4]	; (80450 <PIOD_Handler+0xc>)
   8044a:	4b02      	ldr	r3, [pc, #8]	; (80454 <PIOD_Handler+0x10>)
   8044c:	4798      	blx	r3
   8044e:	bd08      	pop	{r3, pc}
   80450:	400e1400 	.word	0x400e1400
   80454:	000803cd 	.word	0x000803cd

00080458 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80458:	4a18      	ldr	r2, [pc, #96]	; (804bc <pmc_switch_mck_to_pllack+0x64>)
   8045a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8045c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80460:	4318      	orrs	r0, r3
   80462:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80464:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80466:	f013 0f08 	tst.w	r3, #8
   8046a:	d003      	beq.n	80474 <pmc_switch_mck_to_pllack+0x1c>
   8046c:	e009      	b.n	80482 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8046e:	3b01      	subs	r3, #1
   80470:	d103      	bne.n	8047a <pmc_switch_mck_to_pllack+0x22>
   80472:	e01e      	b.n	804b2 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80474:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80478:	4910      	ldr	r1, [pc, #64]	; (804bc <pmc_switch_mck_to_pllack+0x64>)
   8047a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8047c:	f012 0f08 	tst.w	r2, #8
   80480:	d0f5      	beq.n	8046e <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80482:	4a0e      	ldr	r2, [pc, #56]	; (804bc <pmc_switch_mck_to_pllack+0x64>)
   80484:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80486:	f023 0303 	bic.w	r3, r3, #3
   8048a:	f043 0302 	orr.w	r3, r3, #2
   8048e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80490:	6e90      	ldr	r0, [r2, #104]	; 0x68
   80492:	f010 0008 	ands.w	r0, r0, #8
   80496:	d004      	beq.n	804a2 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80498:	2000      	movs	r0, #0
   8049a:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   8049c:	3b01      	subs	r3, #1
   8049e:	d103      	bne.n	804a8 <pmc_switch_mck_to_pllack+0x50>
   804a0:	e009      	b.n	804b6 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   804a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   804a6:	4905      	ldr	r1, [pc, #20]	; (804bc <pmc_switch_mck_to_pllack+0x64>)
   804a8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   804aa:	f012 0f08 	tst.w	r2, #8
   804ae:	d0f5      	beq.n	8049c <pmc_switch_mck_to_pllack+0x44>
   804b0:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   804b2:	2001      	movs	r0, #1
   804b4:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   804b6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   804b8:	4770      	bx	lr
   804ba:	bf00      	nop
   804bc:	400e0600 	.word	0x400e0600

000804c0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   804c0:	b138      	cbz	r0, 804d2 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   804c2:	4911      	ldr	r1, [pc, #68]	; (80508 <pmc_switch_mainck_to_xtal+0x48>)
   804c4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   804c6:	4a11      	ldr	r2, [pc, #68]	; (8050c <pmc_switch_mainck_to_xtal+0x4c>)
   804c8:	401a      	ands	r2, r3
   804ca:	4b11      	ldr	r3, [pc, #68]	; (80510 <pmc_switch_mainck_to_xtal+0x50>)
   804cc:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   804ce:	620b      	str	r3, [r1, #32]
   804d0:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   804d2:	480d      	ldr	r0, [pc, #52]	; (80508 <pmc_switch_mainck_to_xtal+0x48>)
   804d4:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   804d6:	0209      	lsls	r1, r1, #8
   804d8:	b289      	uxth	r1, r1
   804da:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
   804de:	f023 0303 	bic.w	r3, r3, #3
   804e2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   804e6:	f043 0301 	orr.w	r3, r3, #1
   804ea:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   804ec:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   804ee:	4602      	mov	r2, r0
   804f0:	6e93      	ldr	r3, [r2, #104]	; 0x68
   804f2:	f013 0f01 	tst.w	r3, #1
   804f6:	d0fb      	beq.n	804f0 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   804f8:	4a03      	ldr	r2, [pc, #12]	; (80508 <pmc_switch_mainck_to_xtal+0x48>)
   804fa:	6a13      	ldr	r3, [r2, #32]
   804fc:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80504:	6213      	str	r3, [r2, #32]
   80506:	4770      	bx	lr
   80508:	400e0600 	.word	0x400e0600
   8050c:	fec8fffc 	.word	0xfec8fffc
   80510:	01370002 	.word	0x01370002

00080514 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80514:	4b02      	ldr	r3, [pc, #8]	; (80520 <pmc_osc_is_ready_mainck+0xc>)
   80516:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80518:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   8051c:	4770      	bx	lr
   8051e:	bf00      	nop
   80520:	400e0600 	.word	0x400e0600

00080524 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80524:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80528:	4b01      	ldr	r3, [pc, #4]	; (80530 <pmc_disable_pllack+0xc>)
   8052a:	629a      	str	r2, [r3, #40]	; 0x28
   8052c:	4770      	bx	lr
   8052e:	bf00      	nop
   80530:	400e0600 	.word	0x400e0600

00080534 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80534:	4b02      	ldr	r3, [pc, #8]	; (80540 <pmc_is_locked_pllack+0xc>)
   80536:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80538:	f000 0002 	and.w	r0, r0, #2
   8053c:	4770      	bx	lr
   8053e:	bf00      	nop
   80540:	400e0600 	.word	0x400e0600

00080544 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80544:	282c      	cmp	r0, #44	; 0x2c
   80546:	d81e      	bhi.n	80586 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80548:	281f      	cmp	r0, #31
   8054a:	d80c      	bhi.n	80566 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   8054c:	4b11      	ldr	r3, [pc, #68]	; (80594 <pmc_enable_periph_clk+0x50>)
   8054e:	699a      	ldr	r2, [r3, #24]
   80550:	2301      	movs	r3, #1
   80552:	4083      	lsls	r3, r0
   80554:	4393      	bics	r3, r2
   80556:	d018      	beq.n	8058a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80558:	2301      	movs	r3, #1
   8055a:	fa03 f000 	lsl.w	r0, r3, r0
   8055e:	4b0d      	ldr	r3, [pc, #52]	; (80594 <pmc_enable_periph_clk+0x50>)
   80560:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80562:	2000      	movs	r0, #0
   80564:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   80566:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80568:	4b0a      	ldr	r3, [pc, #40]	; (80594 <pmc_enable_periph_clk+0x50>)
   8056a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   8056e:	2301      	movs	r3, #1
   80570:	4083      	lsls	r3, r0
   80572:	4393      	bics	r3, r2
   80574:	d00b      	beq.n	8058e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   80576:	2301      	movs	r3, #1
   80578:	fa03 f000 	lsl.w	r0, r3, r0
   8057c:	4b05      	ldr	r3, [pc, #20]	; (80594 <pmc_enable_periph_clk+0x50>)
   8057e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   80582:	2000      	movs	r0, #0
   80584:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80586:	2001      	movs	r0, #1
   80588:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8058a:	2000      	movs	r0, #0
   8058c:	4770      	bx	lr
   8058e:	2000      	movs	r0, #0
}
   80590:	4770      	bx	lr
   80592:	bf00      	nop
   80594:	400e0600 	.word	0x400e0600

00080598 <ignition_init>:
#include "ignition.h"

void ignition_init(void)
{
	/* PIO Enable register */
	PIOC->PIO_PER			= IGN1;
   80598:	4b02      	ldr	r3, [pc, #8]	; (805a4 <ignition_init+0xc>)
   8059a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8059e:	601a      	str	r2, [r3, #0]
	/* PIO Output register */
	PIOC->PIO_OER			= IGN1;
   805a0:	611a      	str	r2, [r3, #16]
   805a2:	4770      	bx	lr
   805a4:	400e1200 	.word	0x400e1200

000805a8 <cranksignal_init>:
#include "sensors.h"

void cranksignal_init(void)
{
	/* PIO Enable register */
	PIOA->PIO_PER			= CRANKSIGNAL;
   805a8:	4b05      	ldr	r3, [pc, #20]	; (805c0 <cranksignal_init+0x18>)
   805aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   805ae:	601a      	str	r2, [r3, #0]
	/* PIO Disable Output register */
	PIOA->PIO_ODR			= CRANKSIGNAL;
   805b0:	615a      	str	r2, [r3, #20]
	/* Enable interrupt */
	PIOA->PIO_IER			= CRANKSIGNAL;
   805b2:	641a      	str	r2, [r3, #64]	; 0x40

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   805b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   805b8:	4b02      	ldr	r3, [pc, #8]	; (805c4 <cranksignal_init+0x1c>)
   805ba:	601a      	str	r2, [r3, #0]
   805bc:	4770      	bx	lr
   805be:	bf00      	nop
   805c0:	400e0e00 	.word	0x400e0e00
   805c4:	e000e100 	.word	0xe000e100

000805c8 <timers_init>:
#include "timers.h"

void timers_init(void)
{
	/* Enable timer peripheral clock */
	PMC->PMC_PCER0 = (1 << ID_TC0);
   805c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   805cc:	4b0a      	ldr	r3, [pc, #40]	; (805f8 <timers_init+0x30>)
   805ce:	611a      	str	r2, [r3, #16]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   805d0:	4b0a      	ldr	r3, [pc, #40]	; (805fc <timers_init+0x34>)
   805d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   805d6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   805da:	2100      	movs	r1, #0
   805dc:	f883 131b 	strb.w	r1, [r3, #795]	; 0x31b

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   805e0:	601a      	str	r2, [r3, #0]
	CPAS: RA Compare
	CPBS: RB Compare
	CPCS: RC Compare
	                                                                     */
	/************************************************************************/
	TC0->TC_CHANNEL[0].TC_IER = TC_IER_COVFS | TC_IER_CPAS;
   805e2:	4b07      	ldr	r3, [pc, #28]	; (80600 <timers_init+0x38>)
   805e4:	2205      	movs	r2, #5
   805e6:	625a      	str	r2, [r3, #36]	; 0x24
	XC0 Clock selected: XC0
	XC1 Clock selected: XC1
	XC2 Clock selected: XC2                                                                  */
	/************************************************************************/
	/* TC Channel mode register (MCK / 2) */
	TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_TCCLKS_TIMER_CLOCK1 | TC_CMR_WAVE;
   805e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   805ec:	6059      	str	r1, [r3, #4]
	
	/* TEST */
	TC0->TC_CHANNEL[0].TC_RA = 420000000;
   805ee:	4905      	ldr	r1, [pc, #20]	; (80604 <timers_init+0x3c>)
   805f0:	6159      	str	r1, [r3, #20]
	
	/* TC channel control register, enable counter */
	TC0->TC_CHANNEL[0].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   805f2:	601a      	str	r2, [r3, #0]
   805f4:	4770      	bx	lr
   805f6:	bf00      	nop
   805f8:	400e0600 	.word	0x400e0600
   805fc:	e000e100 	.word	0xe000e100
   80600:	40080000 	.word	0x40080000
   80604:	1908b100 	.word	0x1908b100

00080608 <uart_init>:
//#define CONSOLE_UART               UART
//#define CONSOLE_UART_ID            ID_UART
void uart_init(void)
{
	/* Configure peripheral clock UART. */
	PMC->PMC_PCER0 = ID_UART;
   80608:	2208      	movs	r2, #8
   8060a:	4b06      	ldr	r3, [pc, #24]	; (80624 <uart_init+0x1c>)
   8060c:	611a      	str	r2, [r3, #16]
	/* Enable receiver and transmitter */
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   8060e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80612:	2250      	movs	r2, #80	; 0x50
   80614:	601a      	str	r2, [r3, #0]
	/* Turn parity mode off */
	UART->UART_MR = UART_MR_PAR_NO;	
   80616:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8061a:	605a      	str	r2, [r3, #4]
	/* Baud rate generator register */
	UART->UART_BRGR = CLOCKDIVISION;
   8061c:	222d      	movs	r2, #45	; 0x2d
   8061e:	621a      	str	r2, [r3, #32]
   80620:	4770      	bx	lr
   80622:	bf00      	nop
   80624:	400e0600 	.word	0x400e0600

00080628 <uart_transfer>:
	// viljum 2 bit stop bits 8 bit data, asynchronous mode, parity mode off,
}

void uart_transfer(uint8_t transmit)
{
	while (!(UART->UART_SR & UART_SR_TXRDY));
   80628:	4a03      	ldr	r2, [pc, #12]	; (80638 <uart_transfer+0x10>)
   8062a:	6953      	ldr	r3, [r2, #20]
   8062c:	f013 0f02 	tst.w	r3, #2
   80630:	d0fb      	beq.n	8062a <uart_transfer+0x2>
	UART->UART_THR = transmit;
   80632:	4b01      	ldr	r3, [pc, #4]	; (80638 <uart_transfer+0x10>)
   80634:	61d8      	str	r0, [r3, #28]
   80636:	4770      	bx	lr
   80638:	400e0800 	.word	0x400e0800

0008063c <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   8063c:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8063e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80642:	4b16      	ldr	r3, [pc, #88]	; (8069c <board_init+0x60>)
   80644:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80646:	200b      	movs	r0, #11
   80648:	4c15      	ldr	r4, [pc, #84]	; (806a0 <board_init+0x64>)
   8064a:	47a0      	blx	r4
   8064c:	200c      	movs	r0, #12
   8064e:	47a0      	blx	r4
   80650:	200d      	movs	r0, #13
   80652:	47a0      	blx	r4
   80654:	200e      	movs	r0, #14
   80656:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80658:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8065c:	203b      	movs	r0, #59	; 0x3b
   8065e:	4c11      	ldr	r4, [pc, #68]	; (806a4 <board_init+0x68>)
   80660:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80662:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80666:	2055      	movs	r0, #85	; 0x55
   80668:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8066a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8066e:	2056      	movs	r0, #86	; 0x56
   80670:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80672:	490d      	ldr	r1, [pc, #52]	; (806a8 <board_init+0x6c>)
   80674:	2068      	movs	r0, #104	; 0x68
   80676:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80678:	490c      	ldr	r1, [pc, #48]	; (806ac <board_init+0x70>)
   8067a:	205c      	movs	r0, #92	; 0x5c
   8067c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8067e:	4a0c      	ldr	r2, [pc, #48]	; (806b0 <board_init+0x74>)
   80680:	f44f 7140 	mov.w	r1, #768	; 0x300
   80684:	480b      	ldr	r0, [pc, #44]	; (806b4 <board_init+0x78>)
   80686:	4b0c      	ldr	r3, [pc, #48]	; (806b8 <board_init+0x7c>)
   80688:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   8068a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8068e:	202b      	movs	r0, #43	; 0x2b
   80690:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80692:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80696:	202a      	movs	r0, #42	; 0x2a
   80698:	47a0      	blx	r4
   8069a:	bd10      	pop	{r4, pc}
   8069c:	400e1a50 	.word	0x400e1a50
   806a0:	00080545 	.word	0x00080545
   806a4:	00080259 	.word	0x00080259
   806a8:	28000079 	.word	0x28000079
   806ac:	28000001 	.word	0x28000001
   806b0:	08000001 	.word	0x08000001
   806b4:	400e0e00 	.word	0x400e0e00
   806b8:	0008032d 	.word	0x0008032d

000806bc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   806bc:	e7fe      	b.n	806bc <Dummy_Handler>
   806be:	bf00      	nop

000806c0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   806c0:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   806c2:	4b1e      	ldr	r3, [pc, #120]	; (8073c <Reset_Handler+0x7c>)
   806c4:	4a1e      	ldr	r2, [pc, #120]	; (80740 <Reset_Handler+0x80>)
   806c6:	429a      	cmp	r2, r3
   806c8:	d003      	beq.n	806d2 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   806ca:	4b1e      	ldr	r3, [pc, #120]	; (80744 <Reset_Handler+0x84>)
   806cc:	4a1b      	ldr	r2, [pc, #108]	; (8073c <Reset_Handler+0x7c>)
   806ce:	429a      	cmp	r2, r3
   806d0:	d304      	bcc.n	806dc <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   806d2:	4b1d      	ldr	r3, [pc, #116]	; (80748 <Reset_Handler+0x88>)
   806d4:	4a1d      	ldr	r2, [pc, #116]	; (8074c <Reset_Handler+0x8c>)
   806d6:	429a      	cmp	r2, r3
   806d8:	d30f      	bcc.n	806fa <Reset_Handler+0x3a>
   806da:	e01a      	b.n	80712 <Reset_Handler+0x52>
   806dc:	4917      	ldr	r1, [pc, #92]	; (8073c <Reset_Handler+0x7c>)
   806de:	4b1c      	ldr	r3, [pc, #112]	; (80750 <Reset_Handler+0x90>)
   806e0:	1a5b      	subs	r3, r3, r1
   806e2:	f023 0303 	bic.w	r3, r3, #3
   806e6:	3304      	adds	r3, #4
   806e8:	4a15      	ldr	r2, [pc, #84]	; (80740 <Reset_Handler+0x80>)
   806ea:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   806ec:	f852 0b04 	ldr.w	r0, [r2], #4
   806f0:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   806f4:	429a      	cmp	r2, r3
   806f6:	d1f9      	bne.n	806ec <Reset_Handler+0x2c>
   806f8:	e7eb      	b.n	806d2 <Reset_Handler+0x12>
   806fa:	4b16      	ldr	r3, [pc, #88]	; (80754 <Reset_Handler+0x94>)
   806fc:	4a16      	ldr	r2, [pc, #88]	; (80758 <Reset_Handler+0x98>)
   806fe:	1ad2      	subs	r2, r2, r3
   80700:	f022 0203 	bic.w	r2, r2, #3
   80704:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80706:	3b04      	subs	r3, #4
		*pDest++ = 0;
   80708:	2100      	movs	r1, #0
   8070a:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8070e:	4293      	cmp	r3, r2
   80710:	d1fb      	bne.n	8070a <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80712:	4b12      	ldr	r3, [pc, #72]	; (8075c <Reset_Handler+0x9c>)
   80714:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80718:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   8071c:	4910      	ldr	r1, [pc, #64]	; (80760 <Reset_Handler+0xa0>)
   8071e:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80720:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80724:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80728:	d203      	bcs.n	80732 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8072a:	688b      	ldr	r3, [r1, #8]
   8072c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80730:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80732:	4b0c      	ldr	r3, [pc, #48]	; (80764 <Reset_Handler+0xa4>)
   80734:	4798      	blx	r3

	/* Branch to main function */
	main();
   80736:	4b0c      	ldr	r3, [pc, #48]	; (80768 <Reset_Handler+0xa8>)
   80738:	4798      	blx	r3
   8073a:	e7fe      	b.n	8073a <Reset_Handler+0x7a>
   8073c:	20070000 	.word	0x20070000
   80740:	00080ac8 	.word	0x00080ac8
   80744:	20070558 	.word	0x20070558
   80748:	200705e4 	.word	0x200705e4
   8074c:	20070558 	.word	0x20070558
   80750:	20070557 	.word	0x20070557
   80754:	2007055c 	.word	0x2007055c
   80758:	200705e7 	.word	0x200705e7
   8075c:	00080000 	.word	0x00080000
   80760:	e000ed00 	.word	0xe000ed00
   80764:	00080961 	.word	0x00080961
   80768:	00080889 	.word	0x00080889

0008076c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   8076c:	4b3e      	ldr	r3, [pc, #248]	; (80868 <SystemCoreClockUpdate+0xfc>)
   8076e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80770:	f003 0303 	and.w	r3, r3, #3
   80774:	2b03      	cmp	r3, #3
   80776:	d85f      	bhi.n	80838 <SystemCoreClockUpdate+0xcc>
   80778:	e8df f003 	tbb	[pc, r3]
   8077c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80780:	4b3a      	ldr	r3, [pc, #232]	; (8086c <SystemCoreClockUpdate+0x100>)
   80782:	695b      	ldr	r3, [r3, #20]
   80784:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80788:	bf14      	ite	ne
   8078a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8078e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80792:	4b37      	ldr	r3, [pc, #220]	; (80870 <SystemCoreClockUpdate+0x104>)
   80794:	601a      	str	r2, [r3, #0]
   80796:	e04f      	b.n	80838 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80798:	4b33      	ldr	r3, [pc, #204]	; (80868 <SystemCoreClockUpdate+0xfc>)
   8079a:	6a1b      	ldr	r3, [r3, #32]
   8079c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   807a0:	d003      	beq.n	807aa <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   807a2:	4a34      	ldr	r2, [pc, #208]	; (80874 <SystemCoreClockUpdate+0x108>)
   807a4:	4b32      	ldr	r3, [pc, #200]	; (80870 <SystemCoreClockUpdate+0x104>)
   807a6:	601a      	str	r2, [r3, #0]
   807a8:	e046      	b.n	80838 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   807aa:	4a33      	ldr	r2, [pc, #204]	; (80878 <SystemCoreClockUpdate+0x10c>)
   807ac:	4b30      	ldr	r3, [pc, #192]	; (80870 <SystemCoreClockUpdate+0x104>)
   807ae:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   807b0:	4b2d      	ldr	r3, [pc, #180]	; (80868 <SystemCoreClockUpdate+0xfc>)
   807b2:	6a1b      	ldr	r3, [r3, #32]
   807b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   807b8:	2b10      	cmp	r3, #16
   807ba:	d002      	beq.n	807c2 <SystemCoreClockUpdate+0x56>
   807bc:	2b20      	cmp	r3, #32
   807be:	d004      	beq.n	807ca <SystemCoreClockUpdate+0x5e>
   807c0:	e03a      	b.n	80838 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   807c2:	4a2e      	ldr	r2, [pc, #184]	; (8087c <SystemCoreClockUpdate+0x110>)
   807c4:	4b2a      	ldr	r3, [pc, #168]	; (80870 <SystemCoreClockUpdate+0x104>)
   807c6:	601a      	str	r2, [r3, #0]
				break;
   807c8:	e036      	b.n	80838 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   807ca:	4a2a      	ldr	r2, [pc, #168]	; (80874 <SystemCoreClockUpdate+0x108>)
   807cc:	4b28      	ldr	r3, [pc, #160]	; (80870 <SystemCoreClockUpdate+0x104>)
   807ce:	601a      	str	r2, [r3, #0]
				break;
   807d0:	e032      	b.n	80838 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   807d2:	4b25      	ldr	r3, [pc, #148]	; (80868 <SystemCoreClockUpdate+0xfc>)
   807d4:	6a1b      	ldr	r3, [r3, #32]
   807d6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   807da:	d003      	beq.n	807e4 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   807dc:	4a25      	ldr	r2, [pc, #148]	; (80874 <SystemCoreClockUpdate+0x108>)
   807de:	4b24      	ldr	r3, [pc, #144]	; (80870 <SystemCoreClockUpdate+0x104>)
   807e0:	601a      	str	r2, [r3, #0]
   807e2:	e012      	b.n	8080a <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   807e4:	4a24      	ldr	r2, [pc, #144]	; (80878 <SystemCoreClockUpdate+0x10c>)
   807e6:	4b22      	ldr	r3, [pc, #136]	; (80870 <SystemCoreClockUpdate+0x104>)
   807e8:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   807ea:	4b1f      	ldr	r3, [pc, #124]	; (80868 <SystemCoreClockUpdate+0xfc>)
   807ec:	6a1b      	ldr	r3, [r3, #32]
   807ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
   807f2:	2b10      	cmp	r3, #16
   807f4:	d002      	beq.n	807fc <SystemCoreClockUpdate+0x90>
   807f6:	2b20      	cmp	r3, #32
   807f8:	d004      	beq.n	80804 <SystemCoreClockUpdate+0x98>
   807fa:	e006      	b.n	8080a <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   807fc:	4a1f      	ldr	r2, [pc, #124]	; (8087c <SystemCoreClockUpdate+0x110>)
   807fe:	4b1c      	ldr	r3, [pc, #112]	; (80870 <SystemCoreClockUpdate+0x104>)
   80800:	601a      	str	r2, [r3, #0]
				break;
   80802:	e002      	b.n	8080a <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80804:	4a1b      	ldr	r2, [pc, #108]	; (80874 <SystemCoreClockUpdate+0x108>)
   80806:	4b1a      	ldr	r3, [pc, #104]	; (80870 <SystemCoreClockUpdate+0x104>)
   80808:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8080a:	4b17      	ldr	r3, [pc, #92]	; (80868 <SystemCoreClockUpdate+0xfc>)
   8080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8080e:	f003 0303 	and.w	r3, r3, #3
   80812:	2b02      	cmp	r3, #2
   80814:	d10d      	bne.n	80832 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80816:	4a14      	ldr	r2, [pc, #80]	; (80868 <SystemCoreClockUpdate+0xfc>)
   80818:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8081a:	6a92      	ldr	r2, [r2, #40]	; 0x28
   8081c:	4814      	ldr	r0, [pc, #80]	; (80870 <SystemCoreClockUpdate+0x104>)
   8081e:	f3c3 410a 	ubfx	r1, r3, #16, #11
   80822:	6803      	ldr	r3, [r0, #0]
   80824:	fb01 3303 	mla	r3, r1, r3, r3
   80828:	b2d2      	uxtb	r2, r2
   8082a:	fbb3 f3f2 	udiv	r3, r3, r2
   8082e:	6003      	str	r3, [r0, #0]
   80830:	e002      	b.n	80838 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80832:	4a13      	ldr	r2, [pc, #76]	; (80880 <SystemCoreClockUpdate+0x114>)
   80834:	4b0e      	ldr	r3, [pc, #56]	; (80870 <SystemCoreClockUpdate+0x104>)
   80836:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80838:	4b0b      	ldr	r3, [pc, #44]	; (80868 <SystemCoreClockUpdate+0xfc>)
   8083a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8083c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80840:	2b70      	cmp	r3, #112	; 0x70
   80842:	d107      	bne.n	80854 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80844:	4a0a      	ldr	r2, [pc, #40]	; (80870 <SystemCoreClockUpdate+0x104>)
   80846:	6813      	ldr	r3, [r2, #0]
   80848:	490e      	ldr	r1, [pc, #56]	; (80884 <SystemCoreClockUpdate+0x118>)
   8084a:	fba1 1303 	umull	r1, r3, r1, r3
   8084e:	085b      	lsrs	r3, r3, #1
   80850:	6013      	str	r3, [r2, #0]
   80852:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80854:	4b04      	ldr	r3, [pc, #16]	; (80868 <SystemCoreClockUpdate+0xfc>)
   80856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80858:	4905      	ldr	r1, [pc, #20]	; (80870 <SystemCoreClockUpdate+0x104>)
   8085a:	f3c3 1202 	ubfx	r2, r3, #4, #3
   8085e:	680b      	ldr	r3, [r1, #0]
   80860:	40d3      	lsrs	r3, r2
   80862:	600b      	str	r3, [r1, #0]
   80864:	4770      	bx	lr
   80866:	bf00      	nop
   80868:	400e0600 	.word	0x400e0600
   8086c:	400e1a10 	.word	0x400e1a10
   80870:	2007012c 	.word	0x2007012c
   80874:	00b71b00 	.word	0x00b71b00
   80878:	003d0900 	.word	0x003d0900
   8087c:	007a1200 	.word	0x007a1200
   80880:	0e4e1c00 	.word	0x0e4e1c00
   80884:	aaaaaaab 	.word	0xaaaaaaab

00080888 <main>:
 */
#include <asf.h>
#include "global.h"

int main (void)
{
   80888:	b508      	push	{r3, lr}
	/* Initialize the SAM system. Using ASF */
	sysclk_init();
   8088a:	4b0d      	ldr	r3, [pc, #52]	; (808c0 <main+0x38>)
   8088c:	4798      	blx	r3
	board_init();
   8088e:	4b0d      	ldr	r3, [pc, #52]	; (808c4 <main+0x3c>)
   80890:	4798      	blx	r3
	
	/* Enable peripheral clock controller */
	PMC->PMC_PCER0			= ID_PIOA;
   80892:	4b0d      	ldr	r3, [pc, #52]	; (808c8 <main+0x40>)
   80894:	220b      	movs	r2, #11
   80896:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER0			= ID_PIOC;
   80898:	220d      	movs	r2, #13
   8089a:	611a      	str	r2, [r3, #16]
	
	/* Initialize ignition outputs */
	ignition_init();
   8089c:	4b0b      	ldr	r3, [pc, #44]	; (808cc <main+0x44>)
   8089e:	4798      	blx	r3
	
	/* Initialize crankshaft signal input */
	cranksignal_init();
   808a0:	4b0b      	ldr	r3, [pc, #44]	; (808d0 <main+0x48>)
   808a2:	4798      	blx	r3
	
	/* Initialize UART */
	uart_init();
   808a4:	4b0b      	ldr	r3, [pc, #44]	; (808d4 <main+0x4c>)
   808a6:	4798      	blx	r3
	
	/* Initialize timer */
	timers_init();
   808a8:	4b0b      	ldr	r3, [pc, #44]	; (808d8 <main+0x50>)
   808aa:	4798      	blx	r3
	
	
	// Enable ignition
	PIOC->PIO_SODR			= IGN1;
   808ac:	4b0b      	ldr	r3, [pc, #44]	; (808dc <main+0x54>)
   808ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   808b2:	631a      	str	r2, [r3, #48]	; 0x30
	// Disable ignition
	PIOC->PIO_CODR			= IGN1;
   808b4:	635a      	str	r2, [r3, #52]	; 0x34
	
	uart_transfer('t');
   808b6:	2074      	movs	r0, #116	; 0x74
   808b8:	4b09      	ldr	r3, [pc, #36]	; (808e0 <main+0x58>)
   808ba:	4798      	blx	r3
   808bc:	e7fe      	b.n	808bc <main+0x34>
   808be:	bf00      	nop
   808c0:	00080151 	.word	0x00080151
   808c4:	0008063d 	.word	0x0008063d
   808c8:	400e0600 	.word	0x400e0600
   808cc:	00080599 	.word	0x00080599
   808d0:	000805a9 	.word	0x000805a9
   808d4:	00080609 	.word	0x00080609
   808d8:	000805c9 	.word	0x000805c9
   808dc:	400e1200 	.word	0x400e1200
   808e0:	00080629 	.word	0x00080629

000808e4 <PIOA_Handler>:
	
		
}
/* Crankshaft signal and Camshaft signal handler */
void PIOA_Handler(void)
{
   808e4:	b508      	push	{r3, lr}
	/* Pio controller pin data status register */
	if (PIOA->PIO_PDSR & CRANKSIGNAL)
   808e6:	4b0e      	ldr	r3, [pc, #56]	; (80920 <PIOA_Handler+0x3c>)
   808e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   808ea:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   808ee:	d016      	beq.n	8091e <PIOA_Handler+0x3a>
	{
		uart_transfer('a');
   808f0:	2061      	movs	r0, #97	; 0x61
   808f2:	4b0c      	ldr	r3, [pc, #48]	; (80924 <PIOA_Handler+0x40>)
   808f4:	4798      	blx	r3
		if (PIOA->PIO_PDSR & IGN1)
   808f6:	4b0a      	ldr	r3, [pc, #40]	; (80920 <PIOA_Handler+0x3c>)
   808f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   808fa:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   808fe:	d007      	beq.n	80910 <PIOA_Handler+0x2c>
		{
			uart_transfer('b');
   80900:	2062      	movs	r0, #98	; 0x62
   80902:	4b08      	ldr	r3, [pc, #32]	; (80924 <PIOA_Handler+0x40>)
   80904:	4798      	blx	r3
			// Disable ignition
			PIOC->PIO_CODR			= IGN1;
   80906:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8090a:	4b07      	ldr	r3, [pc, #28]	; (80928 <PIOA_Handler+0x44>)
   8090c:	635a      	str	r2, [r3, #52]	; 0x34
   8090e:	bd08      	pop	{r3, pc}
		}
		else
		{
			uart_transfer('c');
   80910:	2063      	movs	r0, #99	; 0x63
   80912:	4b04      	ldr	r3, [pc, #16]	; (80924 <PIOA_Handler+0x40>)
   80914:	4798      	blx	r3
			// Enable ignition
			PIOC->PIO_SODR			= IGN1;
   80916:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8091a:	4b03      	ldr	r3, [pc, #12]	; (80928 <PIOA_Handler+0x44>)
   8091c:	631a      	str	r2, [r3, #48]	; 0x30
   8091e:	bd08      	pop	{r3, pc}
   80920:	400e0e00 	.word	0x400e0e00
   80924:	00080629 	.word	0x00080629
   80928:	400e1200 	.word	0x400e1200

0008092c <TC0_Handler>:
		}
	}
}

void TC0_Handler(void)
{
   8092c:	b510      	push	{r4, lr}
	      COVFS: Counter Overflow Status
		  CPAS: RA Compare Status
		  CPBS: RB Compare Status 
		  CPCS: RC Compare Status                                                              */
	/************************************************************************/
	uint32_t tc_status_register = TC0->TC_CHANNEL[0].TC_SR;
   8092e:	4b09      	ldr	r3, [pc, #36]	; (80954 <TC0_Handler+0x28>)
   80930:	6a1c      	ldr	r4, [r3, #32]
	if (tc_status_register & TC_SR_CPAS)
   80932:	f014 0f04 	tst.w	r4, #4
   80936:	d002      	beq.n	8093e <TC0_Handler+0x12>
	{
		uart_transfer('a');
   80938:	2061      	movs	r0, #97	; 0x61
   8093a:	4b07      	ldr	r3, [pc, #28]	; (80958 <TC0_Handler+0x2c>)
   8093c:	4798      	blx	r3
	}
	if (tc_status_register & TC_SR_COVFS)
   8093e:	f014 0f01 	tst.w	r4, #1
   80942:	d002      	beq.n	8094a <TC0_Handler+0x1e>
	{
		uart_transfer('o');
   80944:	206f      	movs	r0, #111	; 0x6f
   80946:	4b04      	ldr	r3, [pc, #16]	; (80958 <TC0_Handler+0x2c>)
   80948:	4798      	blx	r3
	}
	PIOC->PIO_SODR			= IGN1;
   8094a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8094e:	4b03      	ldr	r3, [pc, #12]	; (8095c <TC0_Handler+0x30>)
   80950:	631a      	str	r2, [r3, #48]	; 0x30
   80952:	bd10      	pop	{r4, pc}
   80954:	40080000 	.word	0x40080000
   80958:	00080629 	.word	0x00080629
   8095c:	400e1200 	.word	0x400e1200

00080960 <__libc_init_array>:
   80960:	b570      	push	{r4, r5, r6, lr}
   80962:	4e0f      	ldr	r6, [pc, #60]	; (809a0 <__libc_init_array+0x40>)
   80964:	4d0f      	ldr	r5, [pc, #60]	; (809a4 <__libc_init_array+0x44>)
   80966:	1b76      	subs	r6, r6, r5
   80968:	10b6      	asrs	r6, r6, #2
   8096a:	bf18      	it	ne
   8096c:	2400      	movne	r4, #0
   8096e:	d005      	beq.n	8097c <__libc_init_array+0x1c>
   80970:	3401      	adds	r4, #1
   80972:	f855 3b04 	ldr.w	r3, [r5], #4
   80976:	4798      	blx	r3
   80978:	42a6      	cmp	r6, r4
   8097a:	d1f9      	bne.n	80970 <__libc_init_array+0x10>
   8097c:	4e0a      	ldr	r6, [pc, #40]	; (809a8 <__libc_init_array+0x48>)
   8097e:	4d0b      	ldr	r5, [pc, #44]	; (809ac <__libc_init_array+0x4c>)
   80980:	f000 f890 	bl	80aa4 <_init>
   80984:	1b76      	subs	r6, r6, r5
   80986:	10b6      	asrs	r6, r6, #2
   80988:	bf18      	it	ne
   8098a:	2400      	movne	r4, #0
   8098c:	d006      	beq.n	8099c <__libc_init_array+0x3c>
   8098e:	3401      	adds	r4, #1
   80990:	f855 3b04 	ldr.w	r3, [r5], #4
   80994:	4798      	blx	r3
   80996:	42a6      	cmp	r6, r4
   80998:	d1f9      	bne.n	8098e <__libc_init_array+0x2e>
   8099a:	bd70      	pop	{r4, r5, r6, pc}
   8099c:	bd70      	pop	{r4, r5, r6, pc}
   8099e:	bf00      	nop
   809a0:	00080ab0 	.word	0x00080ab0
   809a4:	00080ab0 	.word	0x00080ab0
   809a8:	00080ab8 	.word	0x00080ab8
   809ac:	00080ab0 	.word	0x00080ab0

000809b0 <register_fini>:
   809b0:	4b02      	ldr	r3, [pc, #8]	; (809bc <register_fini+0xc>)
   809b2:	b113      	cbz	r3, 809ba <register_fini+0xa>
   809b4:	4802      	ldr	r0, [pc, #8]	; (809c0 <register_fini+0x10>)
   809b6:	f000 b805 	b.w	809c4 <atexit>
   809ba:	4770      	bx	lr
   809bc:	00000000 	.word	0x00000000
   809c0:	000809d1 	.word	0x000809d1

000809c4 <atexit>:
   809c4:	2300      	movs	r3, #0
   809c6:	4601      	mov	r1, r0
   809c8:	461a      	mov	r2, r3
   809ca:	4618      	mov	r0, r3
   809cc:	f000 b814 	b.w	809f8 <__register_exitproc>

000809d0 <__libc_fini_array>:
   809d0:	b538      	push	{r3, r4, r5, lr}
   809d2:	4d07      	ldr	r5, [pc, #28]	; (809f0 <__libc_fini_array+0x20>)
   809d4:	4c07      	ldr	r4, [pc, #28]	; (809f4 <__libc_fini_array+0x24>)
   809d6:	1b2c      	subs	r4, r5, r4
   809d8:	10a4      	asrs	r4, r4, #2
   809da:	d005      	beq.n	809e8 <__libc_fini_array+0x18>
   809dc:	3c01      	subs	r4, #1
   809de:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   809e2:	4798      	blx	r3
   809e4:	2c00      	cmp	r4, #0
   809e6:	d1f9      	bne.n	809dc <__libc_fini_array+0xc>
   809e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   809ec:	f000 b864 	b.w	80ab8 <_fini>
   809f0:	00080ac8 	.word	0x00080ac8
   809f4:	00080ac4 	.word	0x00080ac4

000809f8 <__register_exitproc>:
   809f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   809fc:	4c25      	ldr	r4, [pc, #148]	; (80a94 <__register_exitproc+0x9c>)
   809fe:	4606      	mov	r6, r0
   80a00:	6825      	ldr	r5, [r4, #0]
   80a02:	4688      	mov	r8, r1
   80a04:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   80a08:	4692      	mov	sl, r2
   80a0a:	4699      	mov	r9, r3
   80a0c:	b3c4      	cbz	r4, 80a80 <__register_exitproc+0x88>
   80a0e:	6860      	ldr	r0, [r4, #4]
   80a10:	281f      	cmp	r0, #31
   80a12:	dc17      	bgt.n	80a44 <__register_exitproc+0x4c>
   80a14:	1c41      	adds	r1, r0, #1
   80a16:	b176      	cbz	r6, 80a36 <__register_exitproc+0x3e>
   80a18:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   80a1c:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   80a20:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   80a24:	2201      	movs	r2, #1
   80a26:	4082      	lsls	r2, r0
   80a28:	4315      	orrs	r5, r2
   80a2a:	2e02      	cmp	r6, #2
   80a2c:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   80a30:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   80a34:	d01e      	beq.n	80a74 <__register_exitproc+0x7c>
   80a36:	1c83      	adds	r3, r0, #2
   80a38:	6061      	str	r1, [r4, #4]
   80a3a:	2000      	movs	r0, #0
   80a3c:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   80a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80a44:	4b14      	ldr	r3, [pc, #80]	; (80a98 <__register_exitproc+0xa0>)
   80a46:	b303      	cbz	r3, 80a8a <__register_exitproc+0x92>
   80a48:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80a4c:	f3af 8000 	nop.w
   80a50:	4604      	mov	r4, r0
   80a52:	b1d0      	cbz	r0, 80a8a <__register_exitproc+0x92>
   80a54:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   80a58:	2700      	movs	r7, #0
   80a5a:	e884 0088 	stmia.w	r4, {r3, r7}
   80a5e:	4638      	mov	r0, r7
   80a60:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   80a64:	2101      	movs	r1, #1
   80a66:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   80a6a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   80a6e:	2e00      	cmp	r6, #0
   80a70:	d0e1      	beq.n	80a36 <__register_exitproc+0x3e>
   80a72:	e7d1      	b.n	80a18 <__register_exitproc+0x20>
   80a74:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   80a78:	431a      	orrs	r2, r3
   80a7a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   80a7e:	e7da      	b.n	80a36 <__register_exitproc+0x3e>
   80a80:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   80a84:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   80a88:	e7c1      	b.n	80a0e <__register_exitproc+0x16>
   80a8a:	f04f 30ff 	mov.w	r0, #4294967295
   80a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80a92:	bf00      	nop
   80a94:	00080aa0 	.word	0x00080aa0
   80a98:	00000000 	.word	0x00000000
   80a9c:	00000043 	.word	0x00000043

00080aa0 <_global_impure_ptr>:
   80aa0:	20070130                                0.. 

00080aa4 <_init>:
   80aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80aa6:	bf00      	nop
   80aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80aaa:	bc08      	pop	{r3}
   80aac:	469e      	mov	lr, r3
   80aae:	4770      	bx	lr

00080ab0 <__init_array_start>:
   80ab0:	000809b1 	.word	0x000809b1

00080ab4 <__frame_dummy_init_array_entry>:
   80ab4:	00080119                                ....

00080ab8 <_fini>:
   80ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80aba:	bf00      	nop
   80abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80abe:	bc08      	pop	{r3}
   80ac0:	469e      	mov	lr, r3
   80ac2:	4770      	bx	lr

00080ac4 <__fini_array_start>:
   80ac4:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007012c 	.word	0x2007012c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <SystemCoreClock>:
2007012c:	003d0900                                ..=.

20070130 <impure_data>:
20070130:	00000000 2007041c 20070484 200704ec     ....... ... ... 
	...
20070164:	00080a9c 00000000 00000000 00000000     ................
	...
200701d8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701e8:	0005deec 0000000b 00000000 00000000     ................
	...
